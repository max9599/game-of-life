{"version":3,"sources":["components/BoardRenderer.tsx","components/GameConfigurator.tsx","game/Config.ts","game/index.ts","game/Game.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["BoardStyled","styled","div","React","memo","game","grid","config","unit","size","cellRGBA","canvasElement","useRef","sizeInPixel","useEffect","current","context","getContext","imageData","createImageData","data","i","gridLen","x","y","pixelIndex","len","pData","putImageData","ref","width","height","ConfigStyled","rgba","useState","setConfig","paused","onRestart","useCallback","restart","onStart","start","onStop","stop","onChangeSize","value","setSize","onChangeUnit","setUnit","onChangeInterval","setIntervalMs","onChangeIterations","setIterations","onChangeRGBA","color","setCellRGBA","r","g","b","a","rgbaColorToRGBA","rgb","iteration","maxValue","minValue","step","onChangeComplete","onChange","ariaLabelledby","intervalMs","iterations","className","onClick","Config","initialAliveCells","initialAliveCellsIndexes","fillInitialAliveCellsMap","reduce","prev","curr","concat","find","num","inRGBARange","console","warn","addInitialAliveCell","isXYInRange","Error","push","Game","interval","update","initGame","initXYCell","reset","setInterval","tick","onUpdate","doAction","clearInterval","doUpdate","length","total","getTotalAliveNeighbours","getGameState","pos","alive","indexOf","this","defaultConfig","App","gameInstance","useMemo","setGame","useGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd6411d5.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { GameState } from '../game/Game'\n\ntype BoardRendererProps = {\n    game: GameState\n}\n\nconst BoardStyled = styled.div`\n    position: absolute;\n    overflow: auto;\n    max-height: 100vh;\n    right: 0;\n    top: 0;\n    height: 100vh;\n    width: calc(100vw - 150px);\n    background: rgba(0,0,0,0.01);\n    \n    canvas {\n        border: 1px solid rgba(0,0,0,.05);\n        background: rgba(0,0,0,0.0ยง);\n    }\n`\n\nconst BoardRenderer: React.FC<BoardRendererProps> = ({ game }) => {\n    const { grid, config } = game\n    const { unit, size, cellRGBA } = config\n    const canvasElement = useRef<HTMLCanvasElement>(null)\n    const sizeInPixel = size * unit\n\n    useEffect(() => {\n        if (canvasElement.current) {\n            const canvas = canvasElement.current\n            const context = canvas.getContext('2d')\n            if (context) {\n                const imageData = context.createImageData(sizeInPixel, sizeInPixel)\n                const { data } = imageData\n                for (let i = 0, gridLen = size * size; i < gridLen; i++) {\n                    if (grid[i]) {\n                        const x = ~~(i % size) * unit\n                        const y = ~~(i / size) * unit\n                        for (let pixelIndex = 0, len = unit * unit; pixelIndex < len; pixelIndex++) {\n                            const xx = ~~(pixelIndex % unit)\n                            const yy = ~~(pixelIndex / unit)\n                            const pData = ((x + xx) + (y + yy) * sizeInPixel) * 4\n                            data[pData] = cellRGBA[0]\n                            data[pData + 1] = cellRGBA[1]\n                            data[pData + 2] = cellRGBA[2]\n                            data[pData + 3] = cellRGBA[3]\n                        }\n                    }\n                }\n                context.putImageData(imageData, 0, 0)\n            }\n        }\n    })\n\n    return <BoardStyled>\n        <canvas ref={canvasElement}\n                width={sizeInPixel}\n                height={sizeInPixel}/>\n    </BoardStyled>\n}\n\nexport default React.memo(BoardRenderer)\n","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { SliderPicker, RGBColor } from 'react-color'\nimport InputRange, { Range } from 'react-input-range'\nimport { RGBAType } from '../game/Config'\nimport { GameState } from '../game/Game'\n\nconst rgbaColorToRGBA = (color: RGBColor): RGBAType => [color.r, color.g, color.b, (color.a || 0) * 255]\nconst rgbaToRGBAColor = (rgba: RGBAType): RGBColor => ({ r: rgba[0], g: rgba[1], b: rgba[2], a: rgba[3] / 255 })\n\ntype GameConfiguratorProps = {\n    game: GameState\n}\n\nconst ConfigStyled = styled.div`\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100vh;\n    width: 150px;\n    display: flex;\n    flex-direction: column;\n    padding: 12px 16px;\n    background: rgba(0,0,0,0.05);\n    box-shadow: 0 0 1px 2px rgba(0,0,0,0.05);\n    h2 {\n        margin: 0\n    }\n    > div {\n        margin-top: 1rem;\n        position: relative;\n        padding-top: 32px;\n    }\n    label {\n        font-size: 8px;\n        font-weight: 500;\n        position: absolute;\n        bottom: -1rem;\n        left: 0;\n        right: 0;\n        margin: 0 auto;\n        width: 100%;\n        text-align: center;\n    }\n    \n    .input-range__label {\n      font-size: 8px;\n      color: rgba(0,0,0,0.5);\n    }\n    \n    button {\n        margin-top: 3rem;\n        font-size: .75rem;\n        padding: .2rem .4rem;\n        color: white;\n        border: 1px solid rgba(0,0,0,0.05);\n        cursor: pointer;\n        &.stop {\n            background: #ff3e5b;\n        }\n        &.start {\n            background: #3e51b5;\n            &.re {\n                margin-top: .5rem;\n            }\n        }\n    }\n`\n\nconst GameConfigurator: React.FC<GameConfiguratorProps> = ({ game }) => {\n    const [config, setConfig] = useState(game.config)\n    const { paused } = game\n    const onRestart = useCallback(() => game.restart(), [game])\n    const onStart = useCallback(() => game.start(), [game])\n    const onStop = useCallback(() => game.stop(), [game])\n    const onChangeSize = useCallback((value: number | Range) => {\n        game.stop()\n        setConfig(game.config.setSize(value as number))\n    }, [game])\n    const onChangeUnit = useCallback((value: number | Range) => {\n        game.stop()\n        setConfig(game.config.setUnit(value as number))\n    }, [game])\n    const onChangeInterval = useCallback((value: number | Range) => {\n        game.stop()\n        setConfig(game.config.setIntervalMs(value as number))\n    }, [game])\n    const onChangeIterations = useCallback((value: number | Range) => {\n        game.stop()\n        setConfig(game.config.setIterations(value as number))\n    }, [game])\n    const onChangeRGBA = useCallback((color: any) => {\n        game.stop()\n        setConfig(game.config.setCellRGBA(rgbaColorToRGBA(color.rgb)))\n    }, [game])\n    return (\n        <ConfigStyled>\n            <h2>{game.iteration}</h2>\n            <div>\n                <label>Size</label>\n                <InputRange\n                    maxValue={300}\n                    minValue={10}\n                    step={5}\n                    value={config.size}\n                    onChangeComplete={onRestart}\n                    onChange={onChangeSize}/>\n            </div>\n            <div>\n\n                <label>Unit</label>\n                <InputRange ariaLabelledby={'Unit'}\n                            maxValue={30}\n                            minValue={1}\n                            step={1}\n                            value={config.unit}\n                            onChangeComplete={onStart}\n                            onChange={onChangeUnit}/>\n            </div>\n            <div>\n\n                <label>Iteration (ms)</label>\n                <InputRange\n                    maxValue={1000}\n                    minValue={5}\n                    step={1}\n                    value={config.intervalMs}\n                    onChangeComplete={onStart}\n                    onChange={onChangeInterval}/>\n            </div>\n            <div>\n\n                <label>Iterations (total)</label>\n                <InputRange\n                    maxValue={10000}\n                    minValue={1}\n                    step={1}\n                    value={config.iterations}\n                    onChangeComplete={onStart}\n                    onChange={onChangeIterations}/>\n            </div>\n            <div>\n                <SliderPicker onChange={onChangeRGBA} onChangeComplete={onStart}\n                              color={rgbaToRGBAColor(config.cellRGBA)}/>\n            </div>\n            <button className={paused ? 'start' : 'stop'}\n                    onClick={paused ? onStart : onStop}>{paused ? 'Start' : 'Stop'}</button>\n            <button className=\"re start\" onClick={onRestart}>Restart</button>\n        </ConfigStyled>\n    )\n}\n\nexport default React.memo(GameConfigurator)\n","export type RGBAType = [number, number, number, number]\n\nconst inRGBARange = (num: number) => num >= 0 && num <= 255\n\nexport default class Config {\n    size: number = 100\n    unit: number = 10\n    cellRGBA: RGBAType = [0, 0, 0, 255]\n    iterations: number = 10\n    intervalMs: number = 100\n    initialAliveCells: { x: number, y: number }[] = []\n    initialAliveCellsIndexes: number[] = []\n\n    fillInitialAliveCellsMap = () => {\n        this.initialAliveCellsIndexes = this.initialAliveCells.reduce((prev: number[], curr: { x: number, y: number }) =>\n            prev.concat([curr.y * (this.size) + curr.x]), [])\n    }\n\n    setUnit = (unit: number) => {\n        this.unit = unit\n        return this\n    }\n\n    setCellRGBA = (rgba: RGBAType) => {\n        if (rgba.find(num => !inRGBARange(num))) {\n            console.warn('RGBA is not properly specified, e.g.: [0,0,0,255]')\n        } else {\n            this.cellRGBA = rgba\n        }\n        return this\n    }\n\n    setSize = (size: number) => {\n        this.size = size\n        return this\n    }\n\n    setIterations = (iterations: number) => {\n        this.iterations = iterations\n        return this\n    }\n\n    setIntervalMs = (intervalMs: number) => {\n        this.intervalMs = intervalMs\n        return this\n    }\n\n    addInitialAliveCell = (x: number, y: number) => {\n        if (this.isXYInRange(x, y)) {\n            this.initialAliveCells.push({ x, y })\n        } else {\n            throw Error(`X / Y is not in specified range`)\n        }\n        return this\n    }\n\n    isXYInRange = (x: number, y: number): boolean => x >= 0 && x < this.size && y >= 0 && y < this.size\n\n}\n","import Game from './Game'\nimport Config from './Config'\n\nexport default Game\n\nexport {\n    Config,\n}\n","import Config from './Config'\n\nexport interface GameState {\n    grid: number[]\n    iteration: number\n    paused: boolean\n    config: Config\n    start: any\n    stop: any\n    restart: any\n}\n\nexport default class Game {\n\n    config: Config = new Config()\n    iteration: number = 0\n    paused: boolean = false\n    grid: number[] = []\n\n    interval?: number\n    update?: (game: GameState) => void\n\n    constructor(config: Config) {\n        this.config = config\n    }\n\n    initGame = () => {\n        const size: number = this.config.size\n        for (let i = 0, len = size * size; i < len; i++) {\n            this.initXYCell(i)\n        }\n    }\n\n    start = (reset?: boolean) => {\n        if (reset) {\n            this.iteration = 0\n            this.grid = []\n            this.config.fillInitialAliveCellsMap()\n            this.initGame()\n        }\n        this.paused = false\n        this.interval = setInterval(this.tick, this.config.intervalMs)\n        this.tick()\n        return this\n    }\n\n    onUpdate = (doAction: (state: GameState) => void) => {\n        this.update = doAction\n        return this\n    }\n\n    stop = () => {\n        this.paused = true\n        clearInterval(this.interval)\n        this.doUpdate()\n    }\n\n    restart = () => {\n        this.stop()\n        this.start(true)\n    }\n\n    private tick = () => {\n        this.iteration++\n        const grid = []\n        for (let i = 0, gridLen = this.grid.length; i < gridLen; i++) {\n            const total = this.getTotalAliveNeighbours(i)\n            grid[i] = total !== 2 ? (total === 3 ? 1 : 0) : this.grid[i]\n        }\n        this.grid = grid\n        this.doUpdate()\n        if (this.iteration >= this.config.iterations) {\n            this.stop()\n        }\n    }\n\n    doUpdate = () => {\n        if (this.update) {\n            this.update(this.getGameState())\n        }\n    }\n\n    getGameState = () => ({\n        paused: this.paused,\n        grid: this.grid,\n        iteration: this.iteration,\n        config: this.config,\n        start: this.start,\n        stop: this.stop,\n        restart: this.restart,\n    })\n\n    private getTotalAliveNeighbours = (pos: number): number => {\n        const { size } = this.config\n        return this.grid[pos - 1 - (size)] +\n            this.grid[pos - (size)] +\n            this.grid[pos + 1 - (size)] +\n            this.grid[pos - 1] +\n            this.grid[pos + 1] +\n            this.grid[pos - 1 + (size)] +\n            this.grid[pos + (size)] +\n            this.grid[pos + 1 + (size)]\n    }\n\n    private initXYCell = (i: number) => {\n        const { initialAliveCellsIndexes } = this.config\n        const alive = initialAliveCellsIndexes.indexOf(i) >= 0\n        this.grid[i] = alive ? 1 : 0\n    }\n}\n","import React, { useEffect, useState, useCallback, useMemo } from 'react'\nimport BoardRenderer from './components/BoardRenderer'\nimport GameConfigurator  from './components/GameConfigurator'\nimport Game, { Config } from './game'\nimport { GameState } from './game/Game'\n\nimport 'react-input-range/lib/css/index.css'\nimport './App.css'\n\nconst defaultConfig = new Config()\n    .setSize(160)\n    .setUnit(5)\n    .setIntervalMs(1000 )\n    .setCellRGBA([245, 55, 136, 255])\n    .setIterations(4000)\n    .addInitialAliveCell(52, 26)\n    .addInitialAliveCell(52, 26)\n    .addInitialAliveCell(52, 27)\n    .addInitialAliveCell(51, 27)\n    .addInitialAliveCell(52, 28)\n    .addInitialAliveCell(53, 28)\n\n\nconst useGame = (config: Config) => {\n    const gameInstance = useMemo<Game>(() => new Game(config), [config])\n    const [game, setGame] = useState<GameState>(gameInstance.getGameState())\n    const onUpdate = useCallback((g: GameState) => setGame(g), [])\n    useEffect(() => {\n            gameInstance.onUpdate(onUpdate).start(true)\n            return () => {\n                gameInstance.stop()\n            }\n        }, [gameInstance, onUpdate],\n    )\n    return game\n}\n\nconst App: React.FC = () => {\n    const game = useGame(defaultConfig)\n    return (\n        <>\n            <GameConfigurator game={game}/>\n            <BoardRenderer game={game}/>\n        </>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}